name: Test Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.0"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: |
          flutter test --coverage || echo "Tests failed but continuing with coverage generation"

      - name: Install lcov and bc
        run: sudo apt-get install -y lcov bc

      - name: Generate coverage report
        run: |
          # Check if coverage file exists
          if [ ! -f "coverage/lcov.info" ]; then
            echo "‚ùå No coverage file found. Exiting..."
            exit 1
          fi

          # Generate HTML coverage report
          genhtml coverage/lcov.info -o coverage/html

          # Calculate coverage percentage with fallback method
          COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep -E "lines\.*: [0-9]+\.[0-9]+%" | grep -oE "[0-9]+\.[0-9]+")
          
          # Fallback: Calculate manually from lcov.info file
          if [ -z "$COVERAGE" ]; then
            echo "‚ö†Ô∏è  Using fallback coverage calculation..."
            TOTAL_LINES=$(awk -F: '/^LF:/ {sum += $2} END {print sum}' coverage/lcov.info)
            COVERED_LINES=$(awk -F: '/^LH:/ {sum += $2} END {print sum}' coverage/lcov.info)
            
            if [ "$TOTAL_LINES" -gt 0 ]; then
              # Use awk for reliable decimal formatting
              COVERAGE=$(awk "BEGIN {printf \"%.1f\", $COVERED_LINES * 100 / $TOTAL_LINES}")
            else
              COVERAGE="0.0"
            fi
          fi

          if [ -z "$COVERAGE" ]; then
            echo "‚ùå Could not calculate coverage percentage"
            exit 1
          fi

          # Ensure COVERAGE uses dot as decimal separator (not comma)
          COVERAGE=$(echo "$COVERAGE" | sed 's/,/./g')
          
          echo "üìà Coverage: ${COVERAGE}%"
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV

          # Determine badge color based on coverage thresholds
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi
          echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV

      - name: Update README with coverage badge
        run: |
          # Create or update coverage badge
          BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE_PERCENTAGE}%25-${BADGE_COLOR}?style=for-the-badge"
          
          echo "üîó Badge URL: $BADGE_URL"

          # Update README.md with improved regex
          if grep -q "!\[Test Coverage\]" README.md; then
            # Replace existing badge using # as delimiter to avoid conflict with URLs
            sed -i "s#!\[Test Coverage\](https://img.shields.io/badge/coverage-[^)]*)*#![Test Coverage]($BADGE_URL)#g" README.md
            
            # Verify the change was made
            if grep -q "coverage-${COVERAGE_PERCENTAGE}%" README.md; then
              echo "‚úÖ Updated existing coverage badge in README.md"
            else
              echo "‚ùå Failed to update badge"
              exit 1
            fi
          else
            # Add badge after existing badges
            sed -i '/!\[Dart\]/a ![Test Coverage]('"$BADGE_URL"')' README.md
            echo "‚úÖ Added new coverage badge to README.md"
          fi

      - name: Commit coverage changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update test coverage badge [skip ci]"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
